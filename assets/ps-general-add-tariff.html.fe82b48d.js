import{m as d,o,d as s,f as e,q as i,s as r,F as n,x as h,l as t}from"./app.ee0bf03b.js";import{_ as c}from"./node-ps-general-add-tariff.17755af1.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";var l="/assets/add-tariff-flow.9e258f5b.png";const f={},u=h('<h1 id="ps-general-add-tariff" tabindex="-1"><a class="header-anchor" href="#ps-general-add-tariff" aria-hidden="true">#</a> ps-general-add-tariff</h1><p><img src="'+c+'" alt="ps-general-add-tariff"></p><p>Node to add a value, for example a variable grid tariff, to the price before it is used to calculate savings in the strategy nodes.</p><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>This node is useful if there is an addition to the electricity price that varies over the day, as it might be for the grid tariff.</p><p>If there is one price for example from 22:00 to 06:00 every day, and another price from 06:00 to 22:00, this is the right node to use. It can be used for more than two periods, as long as the time it changes is the same every day.</p><p>Here is how this node is normally used:</p><p><img src="'+l+'" alt="general flow"></p><div class="custom-container tip"><p class="custom-container-title">Changes during the year</p><p>If there is one price now, and another price from a specific date, you can use two nodes after each other. Set the <code>Valid to date</code> of the node with the current prices to the last date the current prices are valid. Set the <code>Valid from date</code> of the node with the upcoming prices to the first date those prices are valid.</p></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><h3 id="add-and-delete-periods" tabindex="-1"><a class="header-anchor" href="#add-and-delete-periods" aria-hidden="true">#</a> Add and delete periods</h3><p>You can have from 1 to 24 periods during the day, with different values to add for each hour. Click the <code>Add period</code> button to add more periods. Click the <code>X</code> button to delete a period.</p><h3 id="from-time-and-value" tabindex="-1"><a class="header-anchor" href="#from-time-and-value" aria-hidden="true">#</a> From time and Value</h3><p>For each period, select the time of the day the value is valid from, and enter the value.</p><h3 id="valid-from-date" tabindex="-1"><a class="header-anchor" href="#valid-from-date" aria-hidden="true">#</a> Valid from date</h3><p>Fill in the first date the config is valid.</p><p>If this is empty, the config is valid from the dawn of time.</p><h3 id="valid-to-date" tabindex="-1"><a class="header-anchor" href="#valid-to-date" aria-hidden="true">#</a> Valid to date</h3><p>Fill in the last date the config is valid.</p><p>If this is empty, the config is valid until forever.</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h2>',21),m=t("The input is the "),g=t("common strategy input format"),_=e("h2",{id:"output",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#output","aria-hidden":"true"},"#"),t(" Output")],-1),v=t("The output is the "),y=t("common strategy input format"),x=e("p",null,"If there is a config property in the input payload, it is passed on to the output payload.",-1);function b(w,V){const a=d("RouterLink");return o(),s(n,null,[u,e("p",null,[m,i(a,{to:"/nodes/strategy-input.html"},{default:r(()=>[g]),_:1})]),_,e("p",null,[v,i(a,{to:"/nodes/strategy-input.html"},{default:r(()=>[y]),_:1})]),x],64)}var F=p(f,[["render",b]]);export{F as default};
